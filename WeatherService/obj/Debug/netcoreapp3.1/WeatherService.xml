<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeatherService</name>
    </assembly>
    <members>
        <member name="T:WeatherService.Modules.DefaultModule">
            <summary>
            Default module for Autofac
            </summary>
            <remarks>
            See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#dependency-injection
            </remarks>
        </member>
        <member name="T:WeatherService.Profiles.DefaultProfile">
            <summary>
            Default profile for AutoMapper
            </summary>
            <remarks>See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#automapper</remarks>
        </member>
        <member name="M:WeatherService.DependenciesConfig.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add Swagger middleware
            </summary>
            <remarks>
            See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#documenting-api
            </remarks>
        </member>
        <member name="M:WeatherService.MiddlewareConfig.UseSwaggerWithOptions(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use swagger UI and endpoint
            </summary>
            <remarks>
            See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#documenting-api
            </remarks>
        </member>
        <member name="M:WeatherService.Controllers.WeatherController.Get">
            <summary>
            Get all weather
            </summary>
            <response code="200">List of all weather</response>
        </member>
        <member name="M:WeatherService.Controllers.WeatherController.GetByDate(System.DateTime)">
            <summary>
            Get all weather, filtered by date
            </summary>
            <param name="date">Weather for a given date</param>
        </member>
        <member name="M:WeatherService.Controllers.WeatherController.Create(System.String)">
            <summary>
            Create a new Weather entry
            </summary>
            <param name="json">New Weather data</param>
            <response code="201">The Weather entry was added successfully</response>
        </member>
        <member name="M:WeatherService.Controllers.WeatherController.Update(WeatherService.Model.Weather)">
            <summary>
            Update a Weather
            </summary>
            <param name="updatedWeather"></param>
        </member>
        <member name="M:WeatherService.Controllers.WeatherController.Delete">
            <summary>
            Clear all weather data
            </summary>
            Clear the data
        </member>
        <member name="T:WeatherService.Dto.UpdateWeather">
            <summary>
            DTO for creating and updating Weather
            </summary>
        </member>
        <member name="P:WeatherService.Dto.UpdateWeather.date">
            <summary>
            date
            </summary>
        </member>
        <member name="F:WeatherService.Dto.UpdateWeather.location">
            <summary>
            location
            </summary>
        </member>
        <member name="P:WeatherService.Dto.UpdateWeather.temperature">
            <summary>
            temperature
            </summary>
        </member>
        <member name="T:WeatherService.Dto.Location">
            <summary>
            DTO for reading weather (-s)
            </summary>
        </member>
        <member name="P:WeatherService.Dto.Weather.id">
            <summary>
            Weather id
            </summary>
        </member>
        <member name="P:WeatherService.Dto.Weather.date">
            <summary>
            date
            </summary>
        </member>
        <member name="F:WeatherService.Dto.Weather.location">
            <summary>
            location
            </summary>
        </member>
        <member name="P:WeatherService.Dto.Weather.temperature">
            <summary>
            temperature
            </summary>
        </member>
        <member name="T:WeatherService.Filters.CacheControlFilter">
            <summary>
            Filter to add header Cache-Control to responses
            </summary>
            <remarks>See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#cache-control</remarks>
        </member>
        <member name="T:WeatherService.Filters.ValidateModelFilter">
            <summary>
            Filter to check is a model valid
            </summary>
            <remarks>See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#model-validation</remarks>
        </member>
        <member name="T:WeatherService.Middleware.ExceptionMiddleware">
            <summary>
            Middleware to handle exceptions.
            It separates exceptions based on their type and returns different status codes and answers based on it, instead of 500 Internal Server Error code in all cases.
            In addition, it writes them in the log.
            </summary>
            <remarks>
            There is another way to do this - an exception filter.
            However, a middleware is a preferred way to achieve this according to the official documentation.
            To learn more see https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-2.1#exception-filters
            
            See also: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#unhandled-exceptions-handling
            </remarks>
        </member>
        <member name="T:WeatherService.Middleware.OptionsVerbMiddleware">
            <summary>
            OPTIONS HTTP-method handler
            </summary>
            <remarks>
            See:     https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#cross-origin-resource-sharing-cors-and-preflight-requests
            </remarks>
        </member>
        <member name="T:WeatherService.Settings">
            <summary>
            Use this class to get an access to options
            </summary>
        </member>
        <member name="M:WeatherService.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            Configure Autofac DI-container
            </summary>
            <param name="builder">Container builder</param>
            <remarks>
            ConfigureContainer is where you can register things directly
            with Autofac. This runs after ConfigureServices so the things
            here will override registrations made in ConfigureServices.
            Don't build the container; that gets done for you.
            
            See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#dependency-injection
            </remarks>
        </member>
        <member name="M:WeatherService.Startup.ConfigureProductionContainer(Autofac.ContainerBuilder)">
            <summary>
            Configure Autofac DI-container for production
            </summary>
            <param name="builder">Container builder</param>
            <remarks>
            This only gets called if your environment is Production. The
            default ConfigureContainer won't be automatically called if this
            one is called.
            
            See: https://github.com/drwatson1/AspNet-Core-REST-Service/wiki#dependency-injection
            </remarks>
        </member>
    </members>
</doc>
